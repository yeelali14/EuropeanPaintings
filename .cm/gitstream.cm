# -*- mode: yaml -*-

manifest:
  version: 1.0

# The `automations` section includes a list of automation that applies 
# to the repository in which gitStream is installed. Each automation has an 
# `if` key with a list of the necessary assertions, as well as a `run` key with a
# list of all actions. All the listed assertions need to pass in order 
# for the following actions to be executed (there is AND relation between conditions).

# Each automation under the `automations` section is independent of the others. 
# Every time a PR is opened or changed, the automation's conditions are evaluated (the `if`). 
# The actions under `run` are executed one by one if all the conditions pass. 

# Conditions consists of an expression, which are wrapped with double curly braces, and 
# includes a context variable like `files` and filter functions like `length`. Filters 
# functions are essentially functions that can be applied to context variables. They are 
# called with a pipe operator (|) and can take arguments. Read more on https://docs.gitstream.cm

automations:
  # This is the name of the review automation. You can use whatever name, a meaningful name 
  # will help to identify it in the future. Each automation name in this file should be unique.
  estimated_time_to_review:
    if:
      - true
    run:
      - action: add-label@v1
        args:
          label: "{{ calc.etr }} min review"
          color: {{ 'E94637' if (calc.etr >= 20) else ('FBBD10' if (calc.etr >= 5) else '36A853') }}

  safe_changes:
    # The `if` key has a list of conditions, each condition is specified as a Jinja expression
    # in a double curly braces. Expressions are evaluated by gitStream on a PR when triggered.
    if:
      # Given the PR code changes, check that only formatting changes were made 
      - {{ is.formatting or is.docs or is.tests }}
    # `run` key has a list of actions, which are executed one by one whenever the automation 
    # conditions are met. 
    run: 
      # When the changes are validated as formatting only, you can help to speed up the review 
      # by adding a label that marks it accordingly.
      - action: add-label@v1
        args:
          label: 'safe-changes'
      # You can uncomment the following action to get gitStream can even automatically approve 
      # such PRs to save reviewers time for such changes.
      # - action: approve@v1
  explain_blame:
    if:
      - true
    run:
      - action: add-comment@v1
        args:
          comment: |
            "{{ repo | explainRankByGitBlame(gt=10, weeks=6) | dump }}"
  explain_blame_1:
    if:
      - true
    run:
      - action: add-comment@v1
        args:
          comment: |
            "{\"base64\":{\"type\":\"Buffer\",\"data\":[32,240,159,145,139,32,32,42,42,83,117,103,103,101,115,116,101,100,32,114,101,118,105,101,119,101,114,115,58,32,121,101,101,108,97,108,105,49,52,44,32,69,108,97,100,75,111,104,97,118,105,42,42,10,32,10,84,104,101,121,32,99,111,110,116,114,105,98,117,116,101,100,32,109,111,114,101,32,116,104,97,110,32,49,48,37,32,111,102,32,116,104,101,32,108,105,110,101,115,58,10,32,10,82,69,65,68,77,69,46,109,100,32,10,121,101,101,108,97,108,105,49,52,58,32,50,55,37,32,10,69,108,97,100,75,111,104,97,118,105,58,32,51,54,37,32,10,84,111,32,108,101,97,114,110,32,109,111,114,101,32,97,98,111,117,116,32,47,58,32,103,105,116,83,116,114,101,97,109,32,45,32,91,86,105,115,105,116,32,111,117,114,32,68,111,99,115,93,40,104,116,116,112,115,58,47,47,100,111,99,115,46,103,105,116,115,116,114,101,97,109,46,99,109,47,41,32,10,32,10]}}\n"



calc:
  etr: {{ branch | estimatedReviewTime }}
is:
  formatting: {{ source.diff.files | isFormattingChange }}
  docs: {{ files | allDocs }}
  tests: {{ files | allTests }}
