automations:
  {% for item in deprecated %}
  catch_deprecated_components_{{ loop.index }}:
    if:
      - {{ source.diff.files | matchDiffLines(regex=item.regex) | some }}
    run:
      - action: add-label@v1
        args:
          label: 'deprecated-component-in-use'
          color: '#FF0000'
      - action: request-changes@v1
        args:
          comment: |
            `{{ item.old }}` component is deprecated, use `{{ item.new }}` instead
  {% endfor %}
  mark_color_pr:
    if:
      - {{ files | length == 2 }}
    run:
      - action: add-label@v1
        args:
          label: "color_label"
          color: "#dcd0ff"
      - action: request-changes@v1
        args:
          comment: |
            You have used deprected API `oldFetch`, use `newFetch` instead.
  is_first_commit:
    if: 
      - {{ repo.contributors | isFirstCommit(branch.author) }}
    run: 
      - action: add-comment@v1
        args:
          comment: Welcome!
  code_owners:
    if: 
      - {{ repo.blame | rankByGitBlame(gt=70) }}
    run: 
      - action: add-comment@v1
        args:
          comment: |
          code owner {{ repo.blame | rankByGitBlame(gt=70) }}
  is_rookie:
    if: 
      - {{ repo.blame | rankByGitBlame(lt=15) | match(term=branch.author) | some }}
    run: 
      - action: add-comment@v1
        args:
          comment: welcome!

 
deprecated:
  - regex: '^[+].*import.*Flex.*from.*_/layout'
    old: Flex
    new: string
  - regex: r/^[+].*import.*Flex.*from.*_\/layout/
    old: Flex
    new: regex